@page
@model Ticket_App.Pages.Shared.Tickets.CreateModel

@{
    ViewData["Title"] = "Crează";
}
<div class="text-center">
    <h1>Bună ziua <strong style="font-weight:bold">@Model.Name</strong></h1>
    <br />
    <h3>Deschide o solicitare nouă alegând unul din subiectele de mai jos:</h3>
    <hr />
    <br />
    <form method="post">

        <div class="container-fluid">

            <div class="row">

                <div class="col">
                    @for (var topicIndex = (Model.Topics.Count() / 2); topicIndex < Model.Topics.Count(); topicIndex++)
                    {
                        string imgpath = "/Pictures/click-icon.jpg";
                        @if (@Model.Topics[topicIndex].ImageName != "")
                        {
                            imgpath = "/Pictures/" + @Model.Topics[topicIndex].ImageName.ToString();
                        }

                        <div class="radiobtn">
                            <input id="@Model.Topics[topicIndex].TicketTopicID" asp-for="Ticket.Subject" type="radio" value="@Model.Topics[topicIndex].TicketTopicName" />

                            <label for="@Model.Topics[topicIndex].TicketTopicID" asp-for="Ticket.Subject"> <img src="@imgpath" class="img-fluid" id="imgButton" /> @Model.Topics[topicIndex].TicketTopicName </label>

                        </div>
                        <br />
                        <br />

                    }
                </div>

                <div class="col">
                    @for (var topicIndex = 0; topicIndex < Model.Topics.Count() / 2; topicIndex++)
                    {
                        string imgpath = "/Pictures/click-icon.jpg";
                        @if (@Model.Topics[topicIndex].ImageName != "")
                        {
                            imgpath = "/Pictures/" + @Model.Topics[topicIndex].ImageName.ToString();
                        }

                        <div class="radiobtn">
                            <input id="@Model.Topics[topicIndex].TicketTopicID" asp-for="Ticket.Subject" type="radio" value="@Model.Topics[topicIndex].TicketTopicName" />
                            <label for="@Model.Topics[topicIndex].TicketTopicID" asp-for="Ticket.Subject"> <img src="@imgpath" class="img-fluid" id="imgButton" /> @Model.Topics[topicIndex].TicketTopicName </label>
                        </div>
                        <br />
                        <br />
                    }
                </div>

            </div>
        </div>

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="form-group" hidden>
            <input asp-for="Ticket.CardNumber" class="form-control" value="@Model.CardNumber" />
            <span asp-validation-for="Ticket.CardNumber" class="text-danger"></span>
        </div>
        <div class="form-group" hidden>
            <input asp-for="Ticket.EmployeeName" class="form-control" value="@Model.Name" />
            <span asp-validation-for="Ticket.CardNumber" class="text-danger"></span>
        </div>
        <div class="form-group" hidden>
            <input asp-for="Ticket.Subject" class="form-control" value="" />
            <span asp-validation-for="Ticket.Subject" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" style="font-size: xx-large" value="Crează solicitare" class="btn btn-primary" />
        </div>

    </form>
    <hr />
    <br />
    <div>
        <button type="button" class="btn btn-warning"> <a style="color:white;font-size: xx-large; text-decoration:none" asp-page="/Index">Anulează</a> </button>
    </div>
</div>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>

        (function () {

            const idleDurationSecs = 30;    // X number of seconds
            const redirectUrl = '/Index';  // Redirect idle users to this URL
            let idleTimeout; // variable to hold the timeout, do not modify

            const resetIdleTimeout = function () {

                // Clears the existing timeout
                if (idleTimeout) clearTimeout(idleTimeout);

                // Set a new idle timeout to load the redirectUrl after idleDurationSecs
                idleTimeout = setTimeout(() => location.href = redirectUrl, idleDurationSecs * 1000);
            };

            // Init on page load
            resetIdleTimeout();

            // Reset the idle timeout on any of the events listed below
            ['click', 'touchstart'].forEach(evt =>
                document.addEventListener(evt, resetIdleTimeout, false)
            );

        })();
    </script>
}
